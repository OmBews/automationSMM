/* global before, beforeEach, describe, it */
"use strict";

var chai = require('chai');
var expect = chai.expect;
var _ = require('lodash');
var Scraper = require("../index.js");

function validate(results, extract, selectors, attributes){
  //console.log(JSON.stringify(results, undefined, 2));
  if (selectors && !_.isArray(selectors)){
    selectors = [ selectors ];
  }
  if (attributes && !_.isArray(attributes)){
    attributes = [ attributes ];
  }
  expect(results).to.be.instanceOf(Array);
  expect(results.length).to.be.gt(0);
  _.forEach(results, function(result){
    expect(result).to.be.instanceOf(Object);
    expect(result).to.have.ownProperty('selector');
    var foundSelector;
    _.forEach(selectors, function(sel){
      if (_.isString(sel)){
        if (result.selector === sel){
          foundSelector = sel;
        }
      }
      else if (_.isPlainObject(sel)){
        if (result.selector === sel.selector){
          foundSelector = sel;
        }
      }
      return !foundSelector;
    });
    expect(foundSelector).to.not.be.undefined;
    expect(result).to.have.ownProperty('content');
    expect(result.content).to.be.instanceOf(Array);
    expect(result.content.length).to.be.gt(0);
    _.forEach(result.content, function(content){
      var x = _.isPlainObject(foundSelector) ? foundSelector.extract : extract;
      expect(content).to.have.ownProperty(x);
      expect(_.isString(content[x])).to.be.true;
      if (attributes && attributes.length > 0){
        expect(content).to.have.ownProperty('attributes');
      }
      _.forEach(attributes, function(attr){
        expect(content.attributes).to.have.ownProperty(attr);
      });
    });
  });
}

describe('Scraper', function(){

  it('should throw an exception if the url param is not a string', function(){
    expect(function(){
      new Scraper();
    }).to.throw(Error);
    expect(function(){
      new Scraper([]);
    }).to.throw(Error);
    expect(function(){
      new Scraper({});
    }).to.throw(Error);
    expect(function(){
      new Scraper(42);
    }).to.throw(Error);
  });

  it('should not require a call to new (still a good idea though)', function(){
    var scraper = Scraper('');
    expect(scraper).to.instanceOf(Scraper);
  });

  it('should set a proxy-authorization header', function(){
    var scraper = new Scraper('http://urbandictionary.com', {
      'auth': {
        'user': 'joe',
        'pass': 'secret'
      }
    });
    expect(scraper._config.headers['proxy-authorization']).to.not.be.undefined;
    expect(scraper._config.headers['proxy-authorization'].indexOf('Basic ')).to.be.gt(-1);
  });

  it('should have the method scrape', function(){
    var scraper = new Scraper('');
    expect(scraper).to.respondTo('scrape');
  });

  it('should return an error', function(done){
    var scraper = new Scraper('http://b.ad');
    scraper.scrape().on('done', function(err){
      expect(err).to.not.be.null;
      //console.error(err);
      done();
    });
  });

  it('should scrape some content and return the html', function(done){
    var scraper = new Scraper('http://www.urbandictionary.com');
    scraper.scrape().on('done', function(err, statusCode, results){
      expect(err).to.be.null;
      expect(statusCode).to.eql(200);
      validate(results, 'html', 'html');
      done();
    });
  });

  it('should scrape some content and return the text', function(done){
    var scraper = new Scraper('http://www.urbandictionary.com', { extract: 'text' });
    scraper.scrape().on('done', function(err, statusCode, results){
      expect(err).to.be.null;
      expect(statusCode).to.eql(200);
      validate(results, 'text', 'html');
      done();
    });
  });

  it('should support per-selector extraction types', function(done){
    var select = [ { selector: '.word', extract: 'text' }, '.meaning' ];
    var scraper = new Scraper('http://www.urbandictionary.com', { selectors: select });
    scraper.scrape().on('done', function(err, statusCode, results){
      expect(err).to.be.null;
      expect(statusCode).to.eql(200);
      validate(results, 'html', select);
      done();
    });
  });
  it('should scrape some content and apply multiple selectors', function(done){
    var select = ['.word', '.meaning'];
    var scraper = new Scraper('http://www.urbandictionary.com', {
      selectors: select
    });
    scraper.scrape().on('done', function(err, statusCode, results){
      expect(err).to.be.null;
      expect(statusCode).to.eql(200);
      validate(results, 'html', select);
      done();
    });
  });

  it('should scrape some content and apply multiple chained selectors', function(done){
    var select = ['div.contributor a.author'];
    var scraper = new Scraper('http://www.urbandictionary.com', {
      selectors: select
    });
    scraper.scrape().on('done', function(err, statusCode, results){
      expect(err).to.be.null;
      expect(statusCode).to.eql(200);
      validate(results, 'html', select);
      done();
    });
  });

  it('should scrape some content and also fetch attribute values', function(done){
    var select = ['.word{href}'];
    var scraper = new Scraper('http://www.urbandictionary.com', {
      selectors: select
    });
    scraper.scrape().on('done', function(err, statusCode, results){
      expect(err).to.be.null;
      expect(statusCode).to.eql(200);
      validate(results, 'html', ['.word'], ['href']);
      done();
    });
  });

  it('should have the property content', function(done){
    var scraper = new Scraper('https://github.com/mattpage/node-scraper', {
      selectors: [ '#readme' ]
     });
    scraper.scrape().on('done', function(){
      expect(scraper.content).to.be.instanceOf(Array);
      expect(scraper.content.length).to.be.gt(0);
       done();
     });
   });

  it('should have more tests');

});
